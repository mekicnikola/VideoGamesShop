<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddToCart" xml:space="preserve">
    <value>Add to Cart</value>
  </data>
  <data name="Adresa" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="ArtikalDodat" xml:space="preserve">
    <value>Item is added to cart!</value>
  </data>
  <data name="Cena" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="ContactUs" xml:space="preserve">
    <value>Contact us</value>
  </data>
  <data name="DatumIzdavanja" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DatumIzlaska" xml:space="preserve">
    <value>Release date</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="GamingShop" xml:space="preserve">
    <value>Gaming shop</value>
  </data>
  <data name="HomeHeroNaslov" xml:space="preserve">
    <value>PlayStation exclusives coming to PC</value>
  </data>
  <data name="HomeHeroOpis" xml:space="preserve">
    <value>The idea of playing PS4 and PS5 games on a PC is getting less fantastical with each passing day, thanks to subscription services and a natural viewpoint change within the video game industry.</value>
  </data>
  <data name="ImePrezime" xml:space="preserve">
    <value>Name and surname</value>
  </data>
  <data name="InsertNewProduct" xml:space="preserve">
    <value>Insert new product</value>
  </data>
  <data name="Izdavac" xml:space="preserve">
    <value>Publisher</value>
  </data>
  <data name="Kolicina" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Korpa" xml:space="preserve">
    <value>Cart</value>
  </data>
  <data name="Kupi" xml:space="preserve">
    <value>Buy</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>Learn More</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="LoremIpsum" xml:space="preserve">
    <value>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</value>
  </data>
  <data name="NastaviKupovinu" xml:space="preserve">
    <value>Continue Shopping</value>
  </data>
  <data name="NazadNaListu" xml:space="preserve">
    <value>Back to list</value>
  </data>
  <data name="Naziv" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Odgovori" xml:space="preserve">
    <value>Respond</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Platforma" xml:space="preserve">
    <value>Platform</value>
  </data>
  <data name="PonistiIzbor" xml:space="preserve">
    <value>Reset choice</value>
  </data>
  <data name="Porudzbine" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="Poruka" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Poruke" xml:space="preserve">
    <value>Messages</value>
  </data>
  <data name="Posalji" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Pretrazi" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Privacy" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="Products" xml:space="preserve">
    <value>Products</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Sacuvaj" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ShopNow" xml:space="preserve">
    <value>Shop Now!</value>
  </data>
  <data name="Slika" xml:space="preserve">
    <value>Picture</value>
  </data>
  <data name="Suma" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="Ubaci" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="Ukloni" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Ukupno" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="UspesnaKupovina" xml:space="preserve">
    <value>You have successfully ordered products!</value>
  </data>
  <data name="UspesnoPoslataPoruka" xml:space="preserve">
    <value>Message sent successfully</value>
  </data>
  <data name="Zanr" xml:space="preserve">
    <value>Genre</value>
  </data>
  <data name="zastavica" xml:space="preserve">
    <value>flag</value>
  </data>
</root>